<#@ assembly name="$(TemplateGeneratorLibFolder)TemplateCodeGenerator.dll" #>
<#@ import namespace="TemplateCodeGenerator.SchemaRead" #>


namespace <#=reader.NameHandler.DataModelNamespace #> {


	public enum ObjectRecordState {
		NEW,
		EXISTING,
		MODIFIED,
		REMOVED
	}

	public class <#=ModelBaseName #> {
	
		[Dapper.NotMapped]
		public ObjectRecordState CurrentState { get; set; } = ObjectRecordState.NEW;

	}

<#
foreach(Table tbl in tables.All ){
#>

	/// <summary>
	/// A class which represents the <#=tbl.Name#> <#=(tbl.IsView)?"view":"table"#>.
	/// </summary>
	[Dapper.Table("<#=tbl.Name#>", Schema="<#=tbl.Schema#>")]
<# if (IncludeRelationships) { 
foreach(Key outerKey in tbl.OuterKeys) {
	if(tables.ContainsTable(outerKey.ReferencedTableName)){#>
	[ForeignKey(Key="<#= outerKey.Name  #>", Direction=KeyDirection.References, ToReference="<#= tbl.Name #>", FromReference="<#= tables[outerKey.ReferencedTableName]?.SchemaQualifiedName #>", FromReferenceColumns="<#= string.Join(",", outerKey.ReferencingTableColumnNames) #>", ToReferenceColumns="<#= string.Join(",", outerKey.ReferencedTableColumnNames) #>")]
<#}#><#}#>
<#foreach(Key innerKey in tbl.InnerKeys) {
	if(tables.ContainsTable(innerKey.ReferencedTableName)){#>
	[ForeignKey(Key="<#= innerKey.Name  #>", Direction=KeyDirection.IsReferencedBy, FromReference="<#= innerKey.ReferencingTableName #>", ToReference="<#= tables[innerKey.ReferencedTableName]?.SchemaQualifiedName #>", ToReferenceColumns="<#= string.Join(",", innerKey.ReferencingTableColumnNames) #>", FromReferenceColumns="<#= string.Join(",", innerKey.ReferencedTableColumnNames) #>")]
<#}#><#}#><#}#>
	public partial class <#=reader.NameHandler.ToDataModelName(tbl.ClassName) #> <# if(!string.IsNullOrEmpty(ModelBaseName)) { #> : <#= ModelBaseName #><#}#> {

<#	foreach(Column col in tbl.Columns)
	{
#>
		[DataColumn(DataType="<#=col.SqlDataType #>", UnderlyingColumn="<#=col.Name #>", AllowNulls=<#=col.AllowNulls #><#
		if(col.MaximumLength > 0 ) { #>, MaxLength=<#=col.MaximumLength.ToString() #><#}#><# 
		if(col.NumericPrecision > 0 ) { #>, NumericPrecision=<#=col.NumericPrecision.ToString()  #><#}#><#  
		if(col.NumericScale > 0 ) { #>, NumericScale=<#=col.NumericScale.ToString() #><#}#><# 
		if(col.IsAutoIncrement) { #>, AutoIncrement=<#=col.IsAutoIncrement.ToString().ToLower() #><#}#> )]<#
		if(!string.IsNullOrEmpty(col.Comment)) {#>

		[DataColumnComment("<#= col.Comment #>")] <#}#>

<# if (col.IsPK) { #>

		[Dapper.Key]

<#}#>
		public <#= col.PropertyType #><#if(col.RequiresDTONullableIndicator){#>?<#}#> <#=col.PropertyName #> { get; set; }<#= col.HasOverrideType ? "	//	Overridden data type" : "" #>
		public static string <#=col.PropertyName #>ColumnName { get; } = "<#=col.Name #>";

<#
	}
#>
	}

<#}#>
}