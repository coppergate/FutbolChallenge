<#@ assembly name="$(TemplateGeneratorLibFolder)TemplateCodeGenerator.dll" #>
<#@ import namespace="Greenshades.Online.Sync.Tools.TemplateCode.Generators.SchemaRead" #>

namespace Repository {

	using <#= Namespace #>.DataModel;
	using System.Data;

<#
foreach(Table tbl in tables.All){
#> 
	//	<#=tbl.DbClassName#> 
    public interface I<#=tbl.ClassName #><#=RepositoryImplementationSuffix #> {	 
		
		<#=DataServiceProviderName #> Provider { get; }

		<#=tbl.DbClassName#> get<#=tbl.ClassName#>(<#= string.Join(", ", tbl.Columns.Where(c => c.IsPK).Select(k => $"{k.PropertyType} {k.PropertyName}")) #> );
		List<<#=tbl.DbClassName#>> getList<#=tbl.ClassName#>(dynamic filter);		
		List<<#=tbl.DbClassName#>> getList<#=tbl.ClassName#>(string whereClause, object parameters); 

<#
if(!tbl.MakeReadOnly)
{
#>
		bool update<#=tbl.ClassName#>(<#=tbl.DbClassName#> value);

		<#=tbl.AutoIncrementingPKType #> insert<#=tbl.ClassName#>(<#=tbl.DbClassName#> value);

		<#=tbl.AutoIncrementingPKType #> merge<#=tbl.ClassName#>(<#=tbl.DbClassName#> value);

		<#=tbl.AutoIncrementingPKType #> mergeWithKeep<#=tbl.ClassName#>(<#=tbl.DbClassName#> value);

		bool delete<#=tbl.ClassName#>(<#=tbl.DbClassName#> value);
<#}#>
	}
<#}#> 

<#
foreach(Table tbl in tables.All){
#>
	public class <#=tbl.ClassName#><#=RepositoryClassName #> : <#=DataServiceProviderName #>, I<#=tbl.ClassName #><#=RepositoryImplementationSuffix #> {


		public  <#=tbl.ClassName#><#=RepositoryClassName #>(<#=ConnectionProviderName #> connectionFactory) : base(connectionFactory){
		}

		public <#=DataServiceProviderName #> Provider { get { return (<#=DataServiceProviderName #>)this; } }


		//	<#=tbl.DbClassName#> 

		public <#=tbl.DbClassName#> get<#=tbl.ClassName#>(<#=string.Join(", ", tbl.Columns.Where(c => c.IsPK).Select(k => $"{k.PropertyType} {k.PropertyName}")) #>)
		{
			<#=tbl.DbClassName#> value = FetchValueWithSql<<#=tbl.DbClassName#>>(<#=tbl.QuotedSelectSqlWithPK#>, new { <#=tbl.PkParameter#> });
			if(null != value)
			{
				value.CurrentState = ObjectRecordState.EXISTING;
			}
			return value;
		}

		public List<<#=tbl.DbClassName#>> getList<#=tbl.ClassName#>(dynamic filter)
		{
			List<<#=tbl.DbClassName#>> localList = FetchListEntity<<#=tbl.DbClassName#>>(filter);
			if(null != localList)
			{
				localList.ForEach(i => i.CurrentState = ObjectRecordState.EXISTING);
			}
			return localList;
		}
		public List<<#=tbl.DbClassName#>> getList<#=tbl.ClassName#>(string whereClause, object parameters)
		{
			StringBuilder bldr = new StringBuilder(<#=$"{tbl.QuotedSelectSql}"#>);
			if(!string.IsNullOrEmpty(whereClause))
			{
				if(!whereClause.Trim().StartsWith("where",System.StringComparison.OrdinalIgnoreCase))
				{
					bldr.Append(" WHERE ");
				}
		
				bldr.Append($" {whereClause} ");
			}
			List<<#=tbl.DbClassName#>> localList = FetchListEntityWithSql<<#=tbl.DbClassName#>>(bldr.ToString(), parameters);
			if(null != localList)
			{
				localList.ForEach(i => i.CurrentState = ObjectRecordState.EXISTING);
			}
			return localList;
		}

<#
if(!tbl.MakeReadOnly)
{
#>
		public bool update<#=tbl.ClassName#>(<#=tbl.DbClassName#> value)
		{
			int rowCount = (int) ExecuteSql(<#=tbl.QuotedUpdateSql#>, new { <#=tbl.ValueParameter#> });
			return rowCount == 1;
		}

		public <#=tbl.AutoIncrementingPKType#> insert<#=tbl.ClassName#>(<#=tbl.DbClassName#> value)
		{
<#if(tbl.AutoIncrementPK) {#>
			<#=tbl.AutoIncrementingPKType#> keyValue = ExecuteSql<<#=tbl.AutoIncrementingPKType#>>(<#=tbl.QuotedInsertSql#> , new {<#=tbl.ValueParameter#>});
<#} else {#>
			ExecuteSql(<#=tbl.QuotedInsertSql#> , new {<#=tbl.ValueParameter#>});
<#}#><#if(tbl.AutoIncrementPK) {#>
			return keyValue;
<#}#>
		}

		public <#=tbl.AutoIncrementingPKType#> merge<#=tbl.ClassName#>(<#=tbl.DbClassName#> value)
		{
<#if(tbl.AutoIncrementPK) {#>
			<#=tbl.AutoIncrementingPKType#> keyValue = ExecuteSql<<#=tbl.AutoIncrementingPKType#>>(<#=tbl.QuotedMergeSql#> , new {<#=tbl.ValueParameter#>});
<#} else {#>
			ExecuteSql(<#=tbl.QuotedMergeSql#> , new {<#=tbl.ValueParameter#>});
<#}#><#if(tbl.AutoIncrementPK) {#>
			return keyValue;
<#}#>
		}

		public <#=tbl.AutoIncrementingPKType#> mergeWithKeep<#=tbl.ClassName#>(<#=tbl.DbClassName#> value)
		{
		<#if(tbl.AutoIncrementPK) {#>
		<#=tbl.AutoIncrementingPKType#> keyValue = ExecuteSql<<#=tbl.AutoIncrementingPKType#>>(<#=tbl.QuotedMergeWithKeepSql#> , new {<#=tbl.ValueParameter#>});
		<#} else {#>ExecuteSql(<#=tbl.QuotedMergeWithKeepSql#> , new {<#=tbl.ValueParameter#>});
		<#}#><#if(tbl.AutoIncrementPK){#>return keyValue;<#}
		#>
		}
		 
		public bool delete<#=tbl.ClassName#>(<#=tbl.DbClassName#> value)
		{
			int count = ExecuteSql(<#=tbl.QuotedDeleteSql#>, new { <#=tbl.DeleteParameter#> });
			return count != 1;
		}


<#}#>
	}
<#}#>

}
